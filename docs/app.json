[{"name":"app.R","content":"library(shiny)\nlibrary(DT)\nlibrary(shinyWidgets)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(stringr)\nlibrary(shinyjs)\nlibrary(bslib)\nlibrary(lubridate)\nlibrary(shinyBS)\nlibrary(plotly)\n\n\nload1 <<- Sys.time()\ncounter <<- 0\na = Sys.time()\n\nsheetname = \"1fbxi0gsUxb9lJgli9LJL8PNKSwWiMvHx8UfjvMNzuuQ\"\nsheetname2 = \"StockData\"\nurl <-  paste0(\"https://docs.google.com/spreadsheets/d/\",sheetname,\"/gviz/tq?tqx=out:csv&sheet=\",sheetname2)\nplace <-  read.csv(url)\nplace$Date = as.Date(place$Date)\nplace <<- place\nsheetname = \"1riSYdnvql9O5OkVBlVEAw1ic3_gG0iRDxePvXP0KCyw\"\nsheetname2 = \"ocean\"\nurl <-  paste0(\"https://docs.google.com/spreadsheets/d/\",sheetname,\"/gviz/tq?tqx=out:csv&sheet=\",sheetname2)\nocean <<-  read.csv(url)\nocean$tradetime = NULL\nocean$price = NULL\noceanData <<- ocean\n\n\nget_load = function() {\n  \n  data1 = data.frame(code = c(\"1PJOG1aOO4lDCmdXAROWV0FQJWpOJcht5UsAkYk6wk4s\",\"18FlJDSPiFixSGNMg-KBATWiTc0z0zBC3BnXJNHpl9hs\",\"1rzmtNeraUAr9-SvmOUW2e3zjn-8VsMjX0-uf_dTXnAE\",\n                              \"1M0Skpk0AS9UL5uUY6HMoP1gninHbp9oCyKACR7xG31Y\", \"1_sCaIwGNYyWvasCj-LbsRII7qpphisnbMx8kiJiT4bs\"),\n                     name = c(\"nasdaq100_io1\",\"nasdaq100_io2\",\"nasdaq100_io3\",\"nasdaq100_io4\",\"nasdaq100_io5\"))\n  for (i in 1:nrow(data1)) {\n    sheetname = data1$code[i]; sheetname2 = data1$name[i]\n    url <-  paste0(\"https://docs.google.com/spreadsheets/d/\",sheetname,\"/gviz/tq?tqx=out:csv&sheet=\",sheetname2)\n    #tc <-  getURL(url, ssl.verifypeer=FALSE)\n    stocks <-  read.csv(url)\n    stocks$Date = Sys.Date(); dbind <<- stocks\n    tobreak= dbind %>% filter(is.na(price))\n    if(nrow(tobreak) == 0) {break} }\n  abind = as_tibble(dbind)\n  abind = abind %>% select(tradetime,Symbol,price)\n  ocean2 <<- oceanData\n  \n  ocean2$Price = NULL\n  ocean2$tradetime = NULL\n  ocean2$Prev = NULL\n  abind$Date = as.Date(sub(\" .*\", \"\", abind$tradetime),\"%m/%d/%Y\")\n  abind$Time = sub(\"^[^ ]* \", \"\", abind$tradetime)\n  abind <<- abind %>% filter(Symbol %in% ocean2$Symbol)\n  \n  if (counter > 0) {\n    counter <<- counter + 1\n    abind$Date1 = abindsave$Date\n    abind$Time1 = abindsave$Time\n    abind$price1 = abindsave$price\n    abind$tradetime1 = abindsave$tradetime\n    abind$price = ifelse(abind$Time > abind$Time1,abind$price,abind$price1)\n    abind$Date = ifelse(abind$Date > abind$Date1,abind$Date,abind$Date1)\n    abind$Time = ifelse(abind$Time > abind$Time1,abind$Time,abind$Time1)\n    abind$tradetime = ifelse(abind$Time > abind$Time1,abind$tradetime,abind$tradetime1)\n  }\n  abind$Symbol = ifelse(abind$Symbol %in% \"ETHUSD\",\"ETH\",abind$Symbol)\n  abind$Symbol = ifelse(abind$Symbol %in% \"BTCUSD\",\"BTC\",abind$Symbol)\n  ocean <<- oceanData %>% left_join(abind,by = \"Symbol\")  \n  ocean$price = ifelse(is.na(ocean$price),ocean$pClose,ocean$price)\n  \n  # blackboxi = place\n  # a = c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"); tomerge = NULL\n  # for (i in 1:length(a)) {\n  #   data = blackboxi %>% filter(str_detect(num,a[i])); data$num = as.numeric(a[i])\n  #   startprice = data %>% group_by(Symbol) %>% slice_min(order_by = Date,n = 1)\n  #   startprice <- distinct(startprice,Symbol,Date,.keep_all = TRUE)\n  #   startprice = startprice %>% select(Symbol,Price = Price,PriceA = Price)\n  #   data = select(data,-Price); data = data %>% left_join(startprice, by = \"Symbol\") %>% na.omit()\n  #   data = data %>% mutate(Change = 100*(na.omit(Price) - na.omit(Price))/na.omit(Price)); tomerge = rbind(tomerge,data) } ## end loop\n  # blackboxi <- tomerge; blackboxi$month = floor_date(blackboxi$Date,\"month\")\n  # a = oceanData %>% select(Company,Sector,Symbol)  ; blackboxi <- blackboxi %>% left_join(a, by = \"Symbol\")\n  # \n  # \n  # blackboxi <<- blackboxi; \n  \n  \n  ocean$p5d = round(100* (ocean$price - ocean$pr5d)/ocean$pr5d,2)\n  ocean$p15d = round(100* (ocean$price - ocean$pr15d)/ocean$pr15d,2)\n  ocean$p1m = round(100* (ocean$price - ocean$pr1m)/ocean$pr1m,2)\n  ocean$p6m = round(100* (ocean$price - ocean$pr6m)/ocean$pr6m,2)\n  ocean$pYTD = round(100* (ocean$price - ocean$prYTD)/ocean$prYTD,2)\n  ocean$p1y = round(100* (ocean$price - ocean$pr1y)/ocean$pr1y,2)\n  ocean$p3y = round(100* (ocean$price - ocean$pr3y)/ocean$pr3y,2)\n  ocean$p5y = round(100* (ocean$price - ocean$pr5y)/ocean$pr5y,2)\n  \n  ocean$pBelow = round(100* (ocean$price - ocean$BelowN)/ocean$BelowN,2)\n  ocean$pLower = round(100* (ocean$prLower - ocean$price)/ocean$price,2)\n  ocean$pUpper = round(100* (ocean$prUpper - ocean$price)/ocean$price,2)\n  ocean$pTrend = round(100* (ocean$prTrend - ocean$price)/ocean$price,2)\n  ocean$pSince = Sys.Date() - as.Date(ocean$BelowDate)\n  ocean$sBelow = ifelse(ocean$pBelow < 0,paste0(\"-\",-1*ocean$pBelow,\"%\" ),\"Current\")\n  ocean$sSince = ifelse(ocean$pSince >1, paste0(comma(as.numeric(ocean$pSince)),\"d\"),\n                        paste0(comma(as.numeric(ocean$pSince)),\" d\"))\n  ocean$sSince = ifelse(ocean$pSince == 0, \"Current\",ifelse(ocean$pSince < 366,paste0(round(as.numeric(ocean$pSince)/1,1),\"d\"),\n                                                            paste0(round(as.numeric(ocean$pSince)/365,1),\"y\")))\n  ocean$sSince = ifelse(ocean$pBelow == 0, \"Current\",ocean$sSince)\n  ocean$sBelow = ifelse(ocean$pBelow == 0,\"Current\",paste0(\"<font color ='maroon'>\",-1*ocean$pBelow,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$sTrend = ifelse(ocean$pTrend >0,paste0(\"<font color = 'darkgreen'>\",ocean$pTrend,\"%\",as.character(icon(\"arrow-up\"))),\n                        paste0(\"<font color = 'maroon'>\",-1*ocean$pTrend,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$sLower = ifelse(ocean$pLower >0,paste0(\"<font color = 'darkgreen'>\",ocean$pLower,\"%\",as.character(icon(\"arrow-up\"))),\n                        paste0(\"<font color = 'maroon'>\",-1*ocean$pLower,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$sUpper = ifelse(ocean$pUpper >0,paste0(\"<font color = 'darkgreen'>\",ocean$pUpper,\"%\",as.character(icon(\"arrow-up\"))),\n                        paste0(\"<font color = 'maroon'>\",-1*ocean$pUpper,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  \n  ocean$s5d = ifelse(ocean$p5d >0,paste0(\"<font color = 'darkgreen'>\",ocean$p5d,\"%\",as.character(icon(\"arrow-up\"))),\n                     paste0(\"<font color = 'maroon'>\",-1*ocean$p5d,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$s15d = ifelse(ocean$p15d >0,paste0(\"<font color = 'darkgreen'>\",ocean$p15d,\"%\",as.character(icon(\"arrow-up\"))),\n                      paste0(\"<font color = 'maroon'>\",-1*ocean$p15d,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$s1m = ifelse(ocean$p1m >0,paste0(\"<font color = 'darkgreen'>\",ocean$p1m,\"%\",as.character(icon(\"arrow-up\"))),\n                     paste0(\"<font color = 'maroon'>\",-1*ocean$p1m,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$s6m = ifelse(ocean$p6m >0,paste0(\"<font color = 'darkgreen'>\",ocean$p6m,\"%\",as.character(icon(\"arrow-up\"))),\n                     paste0(\"<font color = 'maroon'>\",-1*ocean$p6m,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$sYTD = ifelse(ocean$pYTD >0,paste0(\"<font color = 'darkgreen'>\",ocean$pYTD,\"%\",as.character(icon(\"arrow-up\"))),\n                      paste0(\"<font color = 'maroon'>\",-1*ocean$pYTD,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$s1y = ifelse(ocean$p1y >0,paste0(\"<font color = 'darkgreen'>\",ocean$p1y,\"%\",as.character(icon(\"arrow-up\"))),\n                     paste0(\"<font color = 'maroon'>\",-1*ocean$p1y,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$s3y = ifelse(ocean$p3y >0,paste0(\"<font color = 'darkgreen'>\",ocean$p3y,\"%\",as.character(icon(\"arrow-up\"))),\n                     paste0(\"<font color = 'maroon'>\",-1*ocean$p3y,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  ocean$s5y = ifelse(ocean$p5y >0,paste0(\"<font color = 'darkgreen'>\",ocean$p5y,\"%\",as.character(icon(\"arrow-up\"))),\n                     paste0(\"<font color = 'maroon'>\",-1*ocean$p5y,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  \n  ocean$pTarget1yr =  sub('.*[\\\\(,]', '', ocean$`Target1y.p`)\n  ocean$pTarget1yr = str_replace_all(ocean$pTarget1yr,\"[\\\\'),]\",'')\n  ocean$pTarget1yr = str_remove_all(ocean$pTarget1yr,\"%\")\n  ocean$pTarget1yr = gsub(\"\\\\+\", \"\", ocean$pTarget1yr)\n  ocean$pTarget1yr = gsub(\"\\\\-\", \"\", ocean$pTarget1yr)\n  ocean$pTarget1yr = ifelse(is.na(ocean$pTarget1yr),0,ocean$pTarget1yr)\n  ocean$pTarget1yr = ifelse(ocean$pTarget1yr %in% \"n/a\",0,ocean$pTarget1yr)\n  ocean$pTarget1yr =  as.numeric(ocean$pTarget1yr)\n  \n  ocean$sTarget1yr= ifelse(ocean$pTarget1yr>0,paste0(\"<font color = 'darkgreen'>\",ocean$pTarget1yr,\"%\",as.character(icon(\"arrow-up\"))),\n                           paste0(\"<font color = 'maroon'>\",-1*ocean$pTarget1yr,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  \n  ocean$pRatings = ifelse(ocean$`Rating.p` == \"Strong Buy\",2,ifelse(ocean$`Rating.p` == \"Buy\",1,0))\n  ocean$sRating = ifelse(ocean$`Rating.p` == \"Strong Buy\",\"Strong\",ocean$`Rating.p`)\n  #ocean$`Previous.Close.p` = as.numeric(ocean$`Previous.Close.p`)\n  #View(ocean)\n  #ocean$pToday = ifelse(ocean$price == ocean$pClose,round(100*((ocean$price - ocean$`Previous.Close-p`)/ocean$`Previous.Close-p`),2),\n  #                    round(100*((ocean$price - ocean$`Previous.Close-p`))/ocean$`Previous.Close-p`,2))\n  #ocean$`Previous.Close.p` = ifelse(is.na(ocean$`Previous.Close.p`),ocean$pClose2,ocean$`Previous.Close.p`)\n  \n  ocean$Date1 = as.Date(sub(\" .*\", \"\", ocean$tradetime),\"%m/%d/%Y\")\n  ocean$Time = sub(\"^[^ ]* \", \"\", ocean$tradetime)\n  \n  #ocean$pToday = ifelse(ocean$Date1 %in% ocean$pcloseDate,round(100*  ((ocean$price - as.numeric(ocean$pClose2))/as.numeric(ocean$pClose2)),2),\n  #                       round(100*  ((ocean$price - as.numeric(ocean$pClose))/as.numeric(ocean$pClose)),2))\n  ocean$pToday = round(100*((ocean$price - ocean$closeyest)/ocean$closeyest),2)\n  ocean$pToday = ifelse(is.na(ocean$pToday),round(100*  ((ocean$price - as.numeric(ocean$pClose2))/as.numeric(ocean$pClose2)),2),ocean$pToday)\n  \n  \n  ocean1 = ocean\n  #ocean1 = ocean\n  #ocean$pToday = as.numeric(ocean$pToday)\n  ocean$sToday= ifelse(ocean$pToday>0,paste0(\"<font color = 'darkgreen'>\",ocean$pToday,\"%\",as.character(icon(\"arrow-up\"))),\n                       paste0(\"<font color = 'maroon'>\",-1*ocean$pToday,\"%\",as.character(icon(\"arrow-down\"))))\n  \n  a = ocean %>% select(Company, Symbol)\n  place = place %>% left_join(a, by = \"Symbol\")\n  ocean$Company1 = paste0(ocean$Company,\" | \",ocean$Symbol)\n  place$Company1 = paste0(place$Company,\" | \",place$Symbol)\n  place <<- place\n  ocean <<- ocean %>% arrange(r)\n  \n  \n} ## end load\n\nget_load()\ndivs = function(w,ml,mb,mt,bg,h) { paste0(\"display: inline-block;vertical-align:bottom; width:\",w,\";margin-left:\", ml,\"; margin-bottom:\", mb,\";margin-top:\", mt,\n                                          \";background-color:\",bg,\";height:\",h,\";\") }\n\nget_stockData = function(num1) {\n  options(dplyr.summarise.inform = FALSE)\n  tabIDs <- data.frame(Tabs = c(\"5d\",\"15d\", \"1m\",\"6m\",\"YTD\",\"1yr\",\"3yr\", \"5yr\"),num = c(\"9\",\"8\",\"7\",\"6\",\"5\",\"4\",\"3\", \"2\"))\n  grab = tabIDs %>% filter(Tabs %in% num1); z = grab$num; return(z)}\n\n## CSS\n\ncssdash = paste0(\".content-wrapper, .right-side {background-color: white !important;color: black!important; height: 5000px}\") \ncssdashboard <<- paste0(\".content-wrapper, .right-side {background-color: white !important;color: black!important; height: 5000px}\n  .skin-blue .main-sidebar {color: black!important;background-color: white  !important;font-family: 'Arial';font-size:16px;line-height:1.42857143; border: 2px outset; border-color: white !important;box-shadow: 0px 0px 2px 2px rgba(0, 0, 0, 0.1);}\n  .skin-blue .main-header {color: black!important;background-color: white  !important;font-family: 'Arial';font-size:16px; height: 12px !important;}\n  .skin-blue .main-header {color: black!important;background-color: white  !important;font-family: 'Arial';font-size:16px; height: 12px !important;}\n  .skin-blue .main-header .navbar { background-color: white; color: black !inportant; hieght: 10px;} .skin-blue .main-header .navbar > >li > a:hover { background-color: white !important; color: black !inportant;}\n  .skin-blue .main-sidebar .sidebar .sidebar-menu .active a{background-color: white !important;color: black;\n  font-weight: bold;font-size: 16px;}.skin-blue .main-sidebar .sidebar .sidebar-menu a{background-color: white;color: gray;} .sidebar-menu li { margin-bottom: 15px; }\n  .skin-blue .main-header{background-color: white;color: black; height: 12px !important;position: fixed;z-index: 100000;width: 2000px;}\")\ncssdashboard1 = paste0(\" .skin-blue .main-sidebar .sidebar .sidebar-menu a:hover{color: black;} .main-header .logo {margin-left: -20px;width: 130px!important; background-color: white !important; color: black !important; height: 40px !important; font-size: 18px ; margin-left: 0px };\")\ncsstable <<- paste0('table.dataTable.hover tbody tr:hover, table.dataTable.display tbody tr:hover {background-color: #E8F8FF!important; color: black !important; font-weight: italic; outline: false !inportant;}\n  table.dataTable tbody tr.selected>* {box-shadow: inset 0 0 0 9999px transparent !important;} .dataTables_wrapper .dataTables_length {float: left;outline: false !inportant;} \n  .dataTables_wrapper .dataTables_filter {# floatt: right;# text-align: right;}.dataTables_filter { width: 88%; float: right; text-align: right;outline: false !inportant; }\n  .dataTables_wrapper .dataTables_filter {float: left;padding-left: 10px;}.dataTables_wrapper .dataTables_filter input{width: 175px;}\n  .dataTables_scrollBody {white-space: nowrap;  } table.dataTable tbody th, table.dataTable tbody td { padding: 1px 1px;outline: false !inportant;}')\ncsstabble <<- paste0(\".tabbable > .nav > li > a {background-color: white;  color: black !important; font-size: 14px;border-bottom-color: white !important;\n      padding-left:10px;padding-right:10px; padding-top:10px; padding-bottom:10px ; } .tabbable > .nav > li   > a:hover {background-color: white  !important; \n      color: #0284C5 !important; border-bottom-color: white !important;font-size: 14px;padding-left:10px; padding-right:10px ; padding-top:10px; padding-bottom:10px ;}\n      .tabbable > .nav > li[class=active]    > a {background-color: white  !important; color:black !important; border-bottom-color: black !important;font-size: 14px;\n      padding-left:10px; padding-top:10px; padding-bottom:10px ; padding-right:10px ;}\") \ncsstext <<- paste0(\"h1, .h1 {font-size:18px;}h2, .h2 {font-size:20px;}h3, .h3 {font-size:20px; !important;}h4, .h4 {font-size:16px;}\n  h5, .h5 {font-size:14px;} h6, .h6 {font-size:14px; !important}h1, .h1 {font-size:14px;}\")\ncssbtnA <<- paste0(\".btn { color: #7C7A7A; border-color: white !important; font-size: 18px !important;\n  background:white!important; outline: none !important;font-size: 18px !important}\n  .btn-warning:hover { color: black !important;border-color: white !important;\n  background:white!important; outline: none !important;font-size: 18px !important}\n  .btn-warning:focus { color: black !important;height: 40px !important;border-color: white !important;\n  background:white!important;  outline: none !important;font-size: 16px !important}\")\n\n## -- User Interface\nui = fluidPage(\n  title = \"Black Box, i\",\n  shinybrowser::detect(),\n  \n  tags$head(\n    tags$style(HTML(\"\n      /* Change font size of the input field */\n      .vscomp-toggle-button {\n        font-size: 17px !important; /* Adjust as needed */\n      }\n      /* Change font size of the dropdown options */\n      .vscomp-options-list {\n        font-size: 15px !important; /* Adjust as needed */\n      }\n    \"))\n  ),\n  tags$head( tags$style(HTML(\"#tablestock .right-border-column td:nth-child(3) { /* Apply to the second column */ border-right: 2.2px solid black;}\"))),\n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(3) { /* Apply to the second column */border-right: 2.2px solid black;}\"))),\n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(4) { /* Apply to the second column */border-right: 2.2px solid black;}\"))),\n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(9) { /* Apply to the second column */border-right: 2.2px solid black;}\"))),    \n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(11) { /* Apply to the second column */border-right: 2.2px solid black;}\"))),\n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(13) { /* Apply to the second column */border-right: 2.2px solid black;}\"))), \n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(14) { /* Apply to the second column */border-right: 2.2px solid black;}\"))),  \n  tags$head(tags$style(HTML(\"#datatable .right-border-column td:nth-child(15) { /* Apply to the second column */border-right: 2.2px solid black;}\"))), \n  tags$head(tags$style(HTML(cssdashboard))),\n  useShinyjs(),\n  tags$head(\n    tags$style(HTML(\"\n      table.dataTable tbody tr:hover {\n        background-color: lightyellow !important;\n      }\n    \"))\n  ),\n  #tags$style(HTML(cssdash)),\n  tags$style(HTML(cssbtnA)),\n  #tags$style(HTML(csstabble)),tags$style(HTML(csstext)),\n  #tags$head(tags$style(HTML(cssdashboard1))),\n  tags$style(type=\"text/css\",\n             \".shiny-output-error { visibility: hidden; }\",\n             \".shiny-output-error:before { visibility: hidden; }\"\n  ),\n  \n  \n  tags$head(tags$style(HTML(\"\n      .custom-height {\n        height: 1000px;\n        background-color: lightblue;\n      }\n    \"))),\n  \n  \n  tags$head(tags$style(HTML(csstable))),\n  \n  tags$head(tags$style(HTML(\"\n      .custom-height {\n        height: 1000px;\n        background-color: lightblue;\n      }\n    \"))),\n  \n  \n  tags$head(tags$style(HTML(csstable))),\n  tags$head(tags$style(HTML('\n                                .content-wrapper,\n                               .right-side {\n                                 background-color: #ffffff;\n                                 height: 5000px;\n                                }\n  \n                       body{\n                       -moz-transform: scale(0.99 0.99); /* Moz-browsers */\n                       zoom: .99; /* Other non-webkit browsers */\n                        zoom: 99%; /* Webkit browsers */\n                       }\n                                 '))),\n  \n  \n  fluidRow(conditionalPanel(condition = \"input.tabs != 'About1'\",   \n                            fluidRow(\n                              column(6),\n                              column(6,\n                                     div(style=divs(\"20vw\",\"0px\",\"0px\",\"-0px\",\"white\",\"\"),tabsetPanel(id = \"num\",selected = \"5yr\",tabPanel(\"5d\"),tabPanel(\"15d\"),tabPanel(\"1m\"),\n                                                                                                      tabPanel(\"6m\"),tabPanel(\"YTD\"), tabPanel(\"1yr\"),tabPanel(\"3yr\"),tabPanel(\"5yr\")) ),\n                                     div(style=divs(\"8vw\",\"200px\",\"0px\",\"-0px\",\"white\",\"\"),bsButton(\"support\",\"Support Us\")%>%\n                                           tooltip(\"Support\")),\n                                     div(style=divs(\"50px\",\"1px\",\"0px\",\"-0px\",\"\", \"\"),bsButton(\"refresh\",\"\",icon(\"refresh\"))%>%\n                                           tooltip(\"Refresh\")),\n                                     hidden(\n                                     div(style=divs(\"50px\",\"1px\",\"0px\",\"-0px\",\"\", \"\"),bsButton(\"hidden1\",\"\",icon(\"refresh\"))%>%\n                                           tooltip(\"hidden1\"))),  \n                                     \n                                     \n                              )))\n  ),\n  \n  fluidRow(\n    \n    div(\n      style = \"float: right; margin-bottom: 45px; margin-top: -45px;\",\n      \n      tags$img(src = \"https://static.wixstatic.com/media/268ed2_eecd6f901e1b46329c5097860e261741~mv2.png\",\n               alt = \"R Logo\",\n               width = \"40px\")),\n    \n    \n    div(style=divs(\"435px\",\"0px\",\"45px\",\"-45px\",\"\",\"20px\"),\n        tabsetPanel(id = \"tabs\",tabPanel(\"Current\"),tabPanel(\"Compare\"),tabPanel(\"News\"),tabPanel(\"About\"))),\n    div(style=divs(\"500px\",\"0px\",\"45px\",\"-45px\",\"\",\"20px\"),\n        h5(htmlOutput(\"load\")))),\n  \n  conditionalPanel(condition = \"input.tabs != 'About'\",    \n                   fluidRow(column(6, div(style=divs(\"325px\",\"20px\",\"65px\",\"-65px\",\"\",\"15px\"),\n                                          \n                                          tags$div(virtualSelectInput(inputId = \"stocklist1\",width = \"350px\",\n                                                                      label = \"\",choices = unique(ocean$Company1),selected = ocean$Company1[1],search = TRUE,multiple =  FALSE))),\n                                   div(id=\"btn1\", style =divs(\"0px\",\"5px\",\"10px\",\"-10px\",\"\",\"\"),\n                                       div(style=divs(\"0px\",\"5px\",\"10px\",\"-10px\",\"\",\"\"),\n                                           bsButton(\"search1\",label = \"\",style = \"default\",icon = icon(\"search\"),size = \"small\")))\n                                   \n                                   \n                   ),\n                   column(6, div(style=divs(\"325px\",\"0px\",\"65px\",\"-65px\",\"\",\"15px\"),\n                                 \n                                 tags$div(virtualSelectInput(inputId = \"stocklist2\",width = \"350px\",\n                                                             label = \"\",choices = unique(ocean$Company1),selected = ocean$Company1[5],search = TRUE,multiple =  FALSE))),\n                          div(id=\"btn2\", style =divs(\"0px\",\"5px\",\"10px\",\"-10px\",\"\",\"\"),\n                              div(style=divs(\"0px\",\"5px\",\"10px\",\"-10px\",\"\",\"\"),\n                                  bsButton(\"search2\",label = \"\",style = \"default\",icon = icon(\"search\"),size = \"small\")))\n                          \n                          \n                   ),\n                   \n                   \n                   \n                   \n                   ),\n                   \n                   fluidRow(column(6,div(style=divs(\"46vw\",\"20px\",\"30px\",\"-30px\",\"\",\"\"),h4(htmlOutput(\"price1\")))),\n                            column(6,div(style=divs(\"46vw\",\"0px\",\"30px\",\"-30px\",\"\",\"\"),h4(htmlOutput(\"price2\"))))),\n                   \n  ),\n   conditionalPanel(condition = \"input.tabs == 'Current'\",  \n                   fluidRow(column(6,div(style=divs(\"46vw\",\"10px\",\"30px\",\"-30px\",\"\",\"\"),\n                                         plotlyOutput(\"blackboxintro1\",height = 250))),\n                            column(6,div(style=divs(\"46vw\",\"-15px\",\"30px\",\"-30px\",\"\",\"\"),\n                                         plotlyOutput(\"blackboxintro2\",height = 250)))),\n                   \n                   \n                   fluidRow(column(12,\n                                   \n                                   div(style=divs(\"80vw\",\"0px\",\"30px\",\"-30px\",\"white\",\"\"),\n                                       shiny::tabsetPanel(id = \"sectortab\",\n                                                          tabPanel(\"All Companies\"),\n                                                          #tabPanel(\"Nasdaq 100\"),\n                                                          tabPanel(\"S&P 100\"),\n                                                          \n                                                          tabPanel(\"Cryptocurrency\"),\n                                                          tabPanel(\"Index-ETFs\"),\n                                                          tabPanel(\"Technology\"),\n                                                          tabPanel(\"Communication\"),\n                                                          tabPanel(\"Health\"),\n                                                          tabPanel(\"Finance\"),\n                                                          \n                                                          tabPanel(\"Consumer\"),\n                                                          tabPanel(\"Industry\")\n                                       )\n                                   )\n                                   \n                   )),\n                   \n                   \n                   div(style=divs(\"1500px\",\"0px\",\"50px\",\"-50px\",\"\",\"1500px\"),\n                       fluidRow(\n                         div(DTOutput(\"datatable\",width = \"1500px\" ), style = \"font-size:100%\") ))),\n  \n  conditionalPanel(condition = \"input.tabs == 'Compare'\",   \n                   fluidRow(div(style=divs(\"600px\",\"300px\",\"20px\",\"-20px\",\"\",\"250vh\"),\n                                column(12,div(DTOutput(\"tablestock\",width = \"750px\" ), style = \"font-size:105%\") )))),\n  conditionalPanel(condition = \"input.tabs == 'News'\",   \n                   fluidRow(div(style=divs(\"600px\",\"20px\",\"20px\",\"-20px\",\"\",\"250vh\"),\n                                column(6,\n                                       div(DTOutput(\"news1\",width = \"600px\" ), style = \"font-size:105%\") )),\n                            div(style=divs(\"600px\",\"120px\",\"20px\",\"-20px\",\"\",\"250vh\"),column(6,\n                                                                                             div(DTOutput(\"news2\",width = \"600px\" ), style = \"font-size:105%\") )))\n                   \n                   \n  ),\n  conditionalPanel(condition = \"input.tabs == 'About'\",   \n                   fluidRow(column(12,div(style=\"width: 1550px; margin-left: 100px;margin-top: -25px; margin-bottom: 0px; height: 1560px; overflow: hidden;\",\n                                          htmlOutput(\"about1\"))))\n                   \n                   \n  ),\n  \n)\n\n\nserver = function(input, output,session) {\n  \n  get_ui = function() {\n    formals(renderDT)$server <- FALSE;  session$onSessionEnded(function() { stopApp() })\n    observeEvent(input$tabs,{\n      output$load = renderText({\n        a= Sys.time() - load1\n        b = ocean %>% filter(Symbol %in% \"AMZN\")\n        \n        paste0(\"load: \", round(a,3),\" secs\")\n      })\n      \n    })\n    observeEvent(input$num,{\n      if (input$num %in% \"5d\") {a = \"9\"}\n      if (input$num %in% \"15d\") {a = \"8\"}\n      if (input$num %in% \"1m\") {a = \"7\"}\n      if (input$num %in% \"6m\") {a = \"6\"}\n      if (input$num %in% \"YTD\") {a = \"5\"}\n      if (input$num %in% \"1yr\") {a = \"4\"}\n      if (input$num %in% \"3yr\") {a = \"3\"}\n      if (input$num %in% \"5yr\") {a = \"2\"}\n      \n      numGrab <<- reactive({a})\n      \n      output$price1 = renderText({\n        \n        if (numGrab() %in% \"2\") {           a = ocean %>% select(Company,Symbol,Change = p5y,r) }           \n        if (numGrab() %in% \"3\") {           a = ocean %>% select(Company,Symbol,Change = p3y,r) }   \n        if (numGrab() %in% \"4\") {             a = ocean %>% select(Company,Symbol,Change = p1y,r) }           \n        if (numGrab() %in% \"5\") {             a = ocean %>% select(Company,Symbol,Change = pYTD,r) }           \n        if (numGrab() %in% \"6\") {             a = ocean %>% select(Company,Symbol,Change = p6m,r) }           \n        if (numGrab() %in% \"7\") {             a = ocean %>% select(Company,Symbol,Change = p1m,r) }\n        if (numGrab() %in% \"8\") {             a = ocean %>% select(Company,Symbol,Change = p15d,r) }           \n        if (numGrab() %in% \"9\") {             a = ocean %>% select(Company,Symbol,Change = p5d,r) }\n        \n        \n        \n        oc = ocean %>% filter(Company1 %in% input$stocklist1)\n        \n        if (nrow(oc) > 0) {\n          oc$c1 = ifelse(numGrab() %in% \"2\",oc$s5y,\n                         ifelse(numGrab() %in% \"3\",oc$s3y,\n                         ifelse(numGrab() %in% \"4\",oc$s1y,\n                                ifelse(numGrab() %in% \"5\",oc$sYTD, \n                                ifelse(numGrab() %in% \"6\",oc$s6m,\n                                       ifelse(numGrab() %in% \"7\",oc$s1m,\n                                              ifelse(numGrab() %in% \"8\",oc$s15d,\n                                                     ifelse(numGrab() %in% \"9\",oc$s5d, \n                                                            NA))))))))\n          \n          # oc$c1 = ifelse(oc$c1 >0,paste0(\"<font color = 'darkgreen'>\",as.character(icon(\"arrow-up\")),oc$c1,\"%\"),\n          #                paste0(\"<font color = 'maroon'>\",as.character(icon(\"arrow-down\")),-1*oc$c1,\"%\"))\n          \n          paste0(\"<p style='line-height: 1.2;'> <font size = +1>\", oc$sToday, \"<\/font> | <font size = +0>\",oc$tradetime,\"&ensp;&ensp; <font size = +1>\",\" <font color = 'black'> \",input$num,  \" \",oc$c1,\" <div style='line-height: 1.20;'><font size = +0><font color = 'black'><i><b><\/b><\/i> Lower1yr: \",oc$sLower,\"&ensp;&ensp;<font color = 'black'> Trend1yr: \",oc$sTrend,\"<font color = 'black'>&ensp;&ensp; Upper1yr: \",\n                 oc$sUpper,\"<font color = 'black'>&ensp;&ensp; <br> Below High: \",oc$sBelow, \" <font color = 'black'>&ensp;&ensp;\",oc$sSince,\" &ensp;&ensp;| &ensp;&ensp; <b>\",oc$sRating,\"<font color = 'black'><b> <br><i><b><\/b><\/i>Target1yr: \",oc$sTarget1yr)\n        }\n        \n      })\n      \n      \n      output$price2 = renderText({\n        \n        if (numGrab() %in% \"2\") {           a = ocean %>% select(Company,Symbol,Change = p5y,r) }           \n        if (numGrab() %in% \"3\") {           a = ocean %>% select(Company,Symbol,Change = p3y,r) }   \n        if (numGrab() %in% \"4\") {             a = ocean %>% select(Company,Symbol,Change = p1y,r) }           \n        if (numGrab() %in% \"5\") {             a = ocean %>% select(Company,Symbol,Change = pYTD,r) }           \n        if (numGrab() %in% \"6\") {             a = ocean %>% select(Company,Symbol,Change = p6m,r) }           \n        if (numGrab() %in% \"7\") {             a = ocean %>% select(Company,Symbol,Change = p1m,r) }\n        if (numGrab() %in% \"8\") {             a = ocean %>% select(Company,Symbol,Change = p15d,r) }           \n        if (numGrab() %in% \"9\") {             a = ocean %>% select(Company,Symbol,Change = p5d,r) }\n        \n        oc = ocean %>% filter(Company1 %in% input$stocklist2)\n        \n        if (nrow(oc) > 0) {\n          oc$c1 = ifelse(numGrab() %in% \"2\",oc$s5y,\n                         ifelse(numGrab() %in% \"3\",oc$s3y,\n                                ifelse(numGrab() %in% \"4\",oc$s1y,\n                                       ifelse(numGrab() %in% \"5\",oc$sYTD, \n                                              ifelse(numGrab() %in% \"6\",oc$s6m,\n                                                     ifelse(numGrab() %in% \"7\",oc$s1m,\n                                                            ifelse(numGrab() %in% \"8\",oc$s15d,\n                                                                   ifelse(numGrab() %in% \"9\",oc$s5d, \n                                                                          NA))))))))\n          \n          # oc$c1 = ifelse(oc$c1 >0,paste0(\"<font color = 'darkgreen'>\",as.character(icon(\"arrow-up\")),oc$c1,\"%\"),\n          #                paste0(\"<font color = 'maroon'>\",as.character(icon(\"arrow-down\")),-1*oc$c1,\"%\"))\n          \n          paste0(\"<p style='line-height: 1.2;'> <font size = +1>\", oc$sToday, \"<\/font> | <font size = +0>\",oc$tradetime,\"&ensp;&ensp; <font size = +1>\",\" <font color = 'black'> \",input$num,  \" \",oc$c1,\" <div style='line-height: 1.20;'><font size = +0><font color = 'black'><i><b><\/b><\/i> Lower1yr: \",oc$sLower,\"&ensp;&ensp;<font color = 'black'> Trend1yr: \",oc$sTrend,\"<font color = 'black'>&ensp;&ensp; Upper1yr: \",\n                 oc$sUpper,\"<font color = 'black'>&ensp;&ensp; <br> Below High: \",oc$sBelow, \" <font color = 'black'>&ensp;&ensp;\",oc$sSince,\" &ensp;&ensp;| &ensp;&ensp; <b>\",oc$sRating,\"<font color = 'black'><b> <br><i><b><\/b><\/i>Target1yr: \",oc$sTarget1yr)\n        }\n        \n      })\n      \n      \n      observe({\n        d = place %>% filter(Symbol %in% \"MSFT\" & !is.na(Price))\n        dmax = max(d$Date)\n        output$blackboxintro1 = renderPlotly({\n            data = place %>% filter(Company1 %in% input$stocklist1 & str_detect(num,numGrab()))\n            if (numGrab() %in% c(\"9\",\"8\", \"7\",\"6\",\"5\")) {\n              data = data %>% na.omit(Price)\n              \n            } else {\n              data$month = floor_date(data$Date,\"month\")\n              d = data %>% filter(is.na(Price) == FALSE)\n              d = d %>% slice_max(order_by = Date,n =1)\n              data = data %>% group_by(month) %>% slice_max(order_by = Date,n = 1 )\n              data = rbind(d,data)\n              \n              \n            }\n\n          #   data = data %>% distinct(Date,.keep_all = TRUE)\n          #   data = data %>% arrang\n          #data = place %>% filter(Symbol %in% \"AAPL\"  & str_detect(num,\"2\"))  \n          \n          #get_fig(data,ab1,\"2\") \n          \n          #data = place %>% filter(Symbol %in% \"NVDA\" )\n          #bdata = s3readRDS(bucket = \"boxioy.com\",\"blackboxdata1.rds\")\n          #data = place %>% filter(Symbol %in% \"AMZN\" )\n          data = as_tibble(data)\n          data = data %>% arrange(Date)\n          \n          \n          #data = data %>% group_by(w = floor_date(Date,\"week\")) %>% slice_max(order_by = Date, n = 1)\n          #data = distinct(data,Symbol,Date,.keep_all = TRUE)\n          #data$w = NULL\n          vline <- function(x = 0, color = \"green\") {\n            list(type = \"line\",y0 = 0,y1 = 1, yref = \"paper\",\n                 x0 = x,x1 = x,line = list(color = color, dash = \"solid\")) }\n          fig <- plot_ly(data, x = ~Date, y = ~trend_lower, name = 'Lower', type = 'scatter', mode = 'lines',\n                         line=list(color=c('gray'),dash = \"solid\"))\n          fig <- fig %>% add_trace(y = ~trend_upper, name = \"Upper\", mode = 'lines', fill = \"tonexty\",\n                                   fillcolor='rgba(216, 247, 255, 0.5)',line=list(color=c('black'),dash = \"solid\"))\n          fig <- fig %>% add_trace(y = ~yhat, name = 'Trend', mode = 'lines', fill = \"tonexty\",\n                                   fillcolor='rgba(216, 247, 255, 0.5)',line=list(color=c('#004568'),dash = \"solid\"))\n          fig <- fig %>% add_trace(y = ~Price, name = 'Price', mode = 'lines',line=list(color=c('green'),dash = \"solid\"))\n          a = max(na.omit(data$Price))\n          b = max(na.omit(data$trend_upper))\n          c = max(na.omit(data$yhat))\n          amax = max(a,b,c) *1.1\n          a = min(na.omit(data$Price))\n          b = min(na.omit(data$trend_upper))\n          c = min(na.omit(data$yhat))\n          amin = min(a,b,c) *.90\n          brange = as.numeric(max(data$Date) - min(data$Date))\n          brange = brange/14  \n          a = data %>% na.omit()\n          a = max(a$Date)\n          fig = fig %>% layout(annotations = list(text = paste0(format(a,\"<b>%b %d, %Y\"),\"—\"),  x = Sys.Date()-brange, y = amax * .95 ,showarrow=FALSE ),\n                               shapes = list(list(type = \"rect\", text = 'decline1', fillcolor = \"white\", line = list(color = \"green\"),\n                                                  opacity = 0.1, y0 = 0.6, y1 = amax, x0 = dmax, x1 = max(data$Date)),\n                               vline(dmax,text)))\n          \n          Noax <- list(title = \"\", zeroline = FALSE,\n                       showline = FALSE, showticklabels = TRUE,\n                       side = \"right\", showgrid = TRUE, fixedrange = F,\n                       range = c(amin,amax),\n                       ticks = F,\n                       rangemode = 'tozero', zerolinewidth = 5,\n                       rangemode = 'tozero', showgrid = FALSE, showline = T, ticks = 'inside' )\n          \n          fig = fig %>%\n            layout(hovermode = \"x unified\") %>%\n            layout(\n              showlegend = F,\n              list(showgrid = TRUE),\n              legend = list(orientation = 'h'),\n              xaxis = list(title = list(text = '', font = list(size = 12)),\n                           fixedrange = F, showgrid = TRUE, ticks = 'outside', \n                           type = 'date', hoverformat = \"<b>%b %d, %Y\"), \n              yaxis = Noax\n            ) %>% config(displayModeBar = F)\n          fig <- fig %>% layout(xaxis = list(tickformat = \"%m-%d-%Y\"))\n          fig\n          \n        })\n        \n\n          output$blackboxintro2 = renderPlotly({\n            data = place %>% filter(Company1 %in% input$stocklist2 & str_detect(num,numGrab()))\n            if (numGrab() %in% c(\"9\",\"8\", \"7\",\"6\",\"5\")) {\n              data = data %>% na.omit(Price)\n              \n            } else {\n              data$month = floor_date(data$Date,\"month\")\n              d = data %>% filter(is.na(Price) == FALSE)\n              d = d %>% slice_max(order_by = Date,n =1)\n              data = data %>% group_by(month) %>% slice_max(order_by = Date,n = 1 )\n              data = rbind(d,data)\n              \n              \n            }\n            \n            #   data = data %>% distinct(Date,.keep_all = TRUE)\n            #   data = data %>% arrang\n            #data = place %>% filter(Symbol %in% \"AAPL\"  & str_detect(num,\"2\"))  \n            \n            #get_fig(data,ab1,\"2\") \n            \n            #data = place %>% filter(Symbol %in% \"NVDA\" )\n            #bdata = s3readRDS(bucket = \"boxioy.com\",\"blackboxdata1.rds\")\n            #data = place %>% filter(Symbol %in% \"AMZN\" )\n            data = as_tibble(data)\n            data = data %>% arrange(Date)\n            \n            \n            #data = data %>% group_by(w = floor_date(Date,\"week\")) %>% slice_max(order_by = Date, n = 1)\n            #data = distinct(data,Symbol,Date,.keep_all = TRUE)\n            #data$w = NULL\n            vline <- function(x = 0, color = \"green\") {\n              list(type = \"line\",y0 = 0,y1 = 1, yref = \"paper\",\n                   x0 = x,x1 = x,line = list(color = color, dash = \"solid\")) }\n            fig <- plot_ly(data, x = ~Date, y = ~trend_lower, name = 'Lower', type = 'scatter', mode = 'lines',\n                           line=list(color=c('gray'),dash = \"solid\"))\n            fig <- fig %>% add_trace(y = ~trend_upper, name = \"Upper\", mode = 'lines', fill = \"tonexty\",\n                                     fillcolor='rgba(255, 186, 37, 0.5)',line=list(color=c('black'),dash = \"solid\"))\n            fig <- fig %>% add_trace(y = ~yhat, name = 'Trend', mode = 'lines', fill = \"tonexty\",\n                                     fillcolor='rgba(255, 186, 37, 0.5)',line=list(color=c('#004568'),dash = \"solid\"))\n            fig <- fig %>% add_trace(y = ~Price, name = 'Price', mode = 'lines',line=list(color=c('green'),dash = \"solid\"))\n            a = max(na.omit(data$Price))\n            b = max(na.omit(data$trend_upper))\n            c = max(na.omit(data$yhat))\n            amax = max(a,b,c) *1.1\n            a = min(na.omit(data$Price))\n            b = min(na.omit(data$trend_upper))\n            c = min(na.omit(data$yhat))\n            amin = min(a,b,c) *.90\n            brange = as.numeric(max(data$Date) - min(data$Date))\n            brange = brange/14  \n            a = data %>% na.omit()\n            a = max(a$Date)\n            fig = fig %>% layout(annotations = list(text = paste0(format(a,\"<b>%b %d, %Y\"),\"—\"),  x = Sys.Date()-brange, y = amax * .95 ,showarrow=FALSE ),\n                                 shapes = list(list(type = \"rect\", text = 'decline1', fillcolor = \"white\", line = list(color = \"green\"),\n                                                    opacity = 0.1, y0 = 0.6, y1 = amax, x0 = dmax, x1 = max(data$Date)),\n                                               vline(dmax,text)))\n            \n            Noax <- list(title = \"\", zeroline = FALSE,\n                         showline = FALSE, showticklabels = TRUE,\n                         side = \"right\", showgrid = TRUE, fixedrange = F,\n                         range = c(amin,amax),\n                         ticks = F,\n                         rangemode = 'tozero', zerolinewidth = 5,\n                         rangemode = 'tozero', showgrid = FALSE, showline = T, ticks = 'inside' )\n            \n            fig = fig %>%\n              layout(hovermode = \"x unified\") %>%\n              layout(\n                showlegend = F,\n                list(showgrid = TRUE),\n                legend = list(orientation = 'h'),\n                xaxis = list(title = list(text = '', font = list(size = 12)),\n                             fixedrange = F, showgrid = TRUE, ticks = 'outside', \n                             type = 'date', hoverformat = \"<b>%b %d, %Y\"), \n                yaxis = Noax\n              ) %>% config(displayModeBar = F)\n            fig <- fig %>% layout(xaxis = list(tickformat = \"%m-%d-%Y\"))\n            fig\n            \n          #ab1 = stockPrint() %>% filter(print %in% input$stocklist2)\n          #if (nrow(ab1) > 0) {\n          #get_fig(blackboxdata,ab1,numGrab()) \n          #}\n        })   \n      })\n     \n    observe({\n      \n      output$datatable <- renderDT({ \n        data = ocean\n        a = input$sectortab\n        if (a %in% \"Index-ETFs\") {a = \"Index\"}\n        if (a %in% \"All Companies\") {data1 = data} else {\n          data1 = data %>% filter(Sector %in% a) }\n        \n        if (a %in% c(\"Nasdaq 100\",\"S&P 100\")) {\n          a = \"S&P 100\"\n          a = tolower(gsub(\" \", \"\", a))\n          a = gsub(\"[^[:alnum:]]\", \"\", a)\n          data1 = data %>% filter(Index %in% a) }\n        \n        data = data1 %>% select(r, Company,Symbol,Price = price,Today = sToday,`5d` = s5d,`15d` = s15d,`1m` = s1m,`6m` = s6m,`1yr` = s1y,`5yr` = s5y,Below = sBelow,Since = sSince,Lower1yr = sLower,Trend1yr = sTrend,Upper1yr = sUpper,Target1yr = sTarget1yr,Rating = sRating,\n                                pToday,p5d,p15d,p1m,p6m,p1y,p5y,pBelow,pSince,pLower,pTrend,pUpper,pTarget1yr,pRatings)\n        \n        \n        data = data %>% arrange(r)\n        data$Price = round(data$Price,2)\n        datatbl <<- reactive({data})\n        DT::datatable(data, class = c('right-border-column','stripe'),\n                      selection = \"single\",rownames = FALSE,escape = FALSE,\n                      #extensions = 'FixedHeader',\n                      \n                      options = list(            #fixedHeader = TRUE,\n                        #scrollY = \"2000px\", # Optional: set a fixed height for vertical scrolling\n                        #scrollCollapse = FALSE, # Optional: adjust table height based on content\n                        #scrollX = TRUE,                         \n                        ordering=TRUE,searching = TRUE,lengthChange = FALSE,selection = \"single\",lengthChange =\n                          FALSE,paging = FALSE,\n                        #scrollX = TRUE,scrollY = NULL,fillContainer = TRUE,\n                        columnDefs = list(\n                          \n                          # list(list(className = 'dt-left', targets =\n                          #                        c(colnames(data[1]))),list(className ='dt-left', \n                          #                                                   targets = c(2)),\n                          #                 list(className = 'dt-right', targets = c(colnames(data)[6:15])),\n                          #list(visible=FALSE, targets=c(\"6m\")),\n                          list(visible=FALSE, targets=c(0)),list(orderData=c(0), targets=c(1)),\n                          list(visible=FALSE, targets=c(18)),list(orderData=c(18), targets=c(4)),\n                          list(visible=FALSE, targets=c(19)),list(orderData=c(19), targets=c(5)),\n                          list(visible=FALSE, targets=c(20)),list(orderData=c(20), targets=c(6)),\n                          list(visible=FALSE, targets=c(21)),list(orderData=c(21), targets=c(7)),\n                          list(visible=FALSE, targets=c(22)),list(orderData=c(22), targets=c(8)),\n                          list(visible=FALSE, targets=c(23)),list(orderData=c(23), targets=c(9)),\n                          list(visible=FALSE, targets=c(24)),list(orderData=c(24), targets=c(10)),\n                          list(visible=FALSE, targets=c(25)),list(orderData=c(25), targets=c(11)),\n                          list(visible=FALSE, targets=c(26)),list(orderData=c(26), targets=c(12)),\n                          list(visible=FALSE, targets=c(27)),list(orderData=c(27), targets=c(13)),\n                          list(visible=FALSE, targets=c(28)),list(orderData=c(28), targets=c(14)),\n                          list(visible=FALSE, targets=c(29)),list(orderData=c(29), targets=c(15)),\n                          list(visible=FALSE, targets=c(30)),list(orderData=c(30), targets=c(16)),\n                          list(visible=FALSE, targets=c(31)),list(orderData=c(31), targets=c(17))\n                          \n                          \n                          \n                          \n                          \n                          \n                          \n                        ),\n                        initComplete = JS(\"function(settings, json)\n                                                 {\",\"$(this.api().table().header()).css({'background-color': 'white', 'color': 'black',\n                                                 'height': '50%'});\",\"}\"),\n                        headerCallback = DT::JS(\"function(thead) {\",\"  $(thead).css('font-size', '95%');\",\"}\"),\n                        headerCallback <- DT::JS(\n                          \"function(thead, data, start, end, display){\",\n                          \"  $('th', thead).css('border-bottom', '5px solid black');\", # Adjust '1px solid black' as needed\n                          \"}\"\n                          \n                        )))   %>%    formatStyle(\n                          columns = names(data), # Apply to all columns\n                          lineHeight = '70%'    # Adjust line height, e.g., 80% of default\n                        ) %>%\n          DT::formatStyle(., which(c(colnames(data)) %in% c(colnames(data))), color = '', \n                          cursor='pointer',fontSize = \"94%\",fontFamily=\"arial\")   #%>%\n        #DT::formatStyle(columns = c(1:3), width='120%') #%>%\n        #   DT::formatStyle( 0, target= 'row',fontWeight ='normal', lineHeight='10%') %>%\n        #   DT::formatStyle(., which(c(colnames(data)) %in% c(colnames(data))), color = '', \n        #                   cursor='pointer',fontSize = \"`115%\",fontFamily=\"arial\")   \n        \n      })\n      \n      \n    })\n    })\n    output$tablestock = renderDT({\n      if(input$tabs == \"Compare\") {\n        price_df = ocean\n        \n        \n        price_df = price_df %>% select(\n          r1fg = r,\n          Symbol = Symbol,\n          Company = Company,\n          Company1fg = Company,\n          Symbol1fg = Symbol,\n          Sector1fg = Sector,\n          Price1fg = price,\n          `Volume USD1fg` = volume,\n          Below1fg = pBelow,\n          Since1fg = pSince,\n          Target1yr1fg = pTarget1yr,\n          Trend1yr1fg = pTrend,\n          Upper1yr1fg = pUpper,\n          Lower1yr1fg = pLower,\n          Today1fg = pToday,\n          Return.5d1fg = p5d,\n          Return.15d1fg = p15d,\n          Return.1m1fg = p1m,\n          Return.6m1fg = p6m,\n          Return.YTD1fg = pYTD,\n          Return.1yr1fg = p1y,\n          Return.5yr1fg = p5y,\n          EPS1fg = eps,\n          Market.Cap1fg = marketcap,\n          PE1fg = pe,\n          Beta1fg = beta,\n          Forward.PE1fg = Forward.PE.p,\n          Dividend1fg = Dividend.p,\n          Revenue1fg = Revenue.p,\n          Net.Income1fg = Net.Income.p,\n          Shares.Out1fg = Shares.Out.p,\n          Earnings.Date1fg = Earnings.Date.p\n          \n        )\n        \n        price_df$Shares.OutA = price_df$Shares.Out1fg\n        price_df$Shares.Out1fg = ifelse(str_detect(price_df$Shares.Out1fg,\"B\"),as.numeric(gsub(\"[a-zA-Z]\", \"\", price_df$Shares.Out1fg))* 1000000000,\n                                        as.numeric(gsub(\"[a-zA-Z]\", \"\", price_df$Shares.Out1fg))* 1000000)\n        \n        \n        \n        data.frame(price_df)\n        price_df$`Volume USD1fg`\n        price_df$`Volume USD1fg` = price_df$`Volume USD1fg` *price_df$Price1fg\n        price_df$DividendA = price_df$Dividend1fg\n        price_df$Dividend1fg <- gsub(\".*\\\\((.*)\\\\).*\", \"\\\\1\", price_df$Dividend1fg)\n        price_df$Dividend1fg <- as.numeric(gsub(\"%\", \"\", price_df$Dividend1fg))\n        price_df$Earnings.Date1fg = as.Date(price_df$Earnings.Date1fg,\"%b %d, %Y\")\n        \n        price_df = price_df %>% mutate(\n          r.R3 = rank(desc(r1fg)),\n          Company.R3 = rank(desc(Company1fg)),\n          Symbol.R3 = rank(desc(Symbol1fg)),\n          Sector.R3 = rank(desc(Sector1fg)),\n          Price.R3 = rank(desc(Price1fg)),\n          `Volume USD.R3` = rank(desc(`Volume USD1fg`)),\n          Below.R3 = rank(desc(Below1fg)),\n          Since.R3 = rank(desc(Since1fg)),\n          Target1yr.R3 = rank(desc(Target1yr1fg)),\n          Trend1yr.R3 = rank(desc(Trend1yr1fg)),\n          Upper1yr.R3 = rank(desc(Upper1yr1fg)),\n          Lower1yr.R3 = rank(desc(Lower1yr1fg)),\n          Today.R3 = rank(desc(Today1fg)),\n          Return.5d.R3 = rank(desc(Return.5d1fg)),\n          Return.15d.R3 = rank(desc(Return.15d1fg)),\n          Return.1m.R3 = rank(desc(Return.1m1fg)),\n          Return.6m.R3 = rank(desc(Return.6m1fg)),\n          Return.YTD.R3 = rank(desc(Return.YTD1fg)),\n          Return.1yr.R3 = rank(desc(Return.1yr1fg)),\n          Return.5yr.R3 = rank(desc(Return.5yr1fg)),\n          EPS.R3 = rank(desc(EPS1fg)),\n          Market.Cap.R3 = rank(desc(Market.Cap1fg)),\n          PE.R3 = rank(desc(PE1fg)),\n          Beta.R3 = rank(desc(Beta1fg)),\n          Forward.PE.R3 = rank(desc(Forward.PE1fg)),\n          Dividend.R3 = rank(desc(Dividend1fg)),\n          Revenue.R3 = rank(desc(Revenue1fg)),\n          Net.Income.R3 = rank(desc(Net.Income1fg)),\n          Shares.Out.R3 = rank(desc(Shares.Out1fg)),\n          Earnings.Date.R3 = rank(desc(Earnings.Date1fg))\n          \n        )\n        \n        \n        price_df = price_df %>% mutate(\n          r.R12 = paste0(\"#\",r.R3),\n          Company.R12 = ifelse(is.na(Company1fg),\"\", paste0(\"# \",Company.R3)),\n          Symbol.R12 = ifelse(is.na(Symbol1fg),\"\", paste0(\"# \",Symbol.R3)),\n          Sector.R12 = ifelse(is.na(Sector1fg),\"\", paste0(\"# \",Sector.R3)),\n          Price.R12 = ifelse(is.na(Price1fg),\"\", paste0(\"# \",Price.R3)),\n          `Volume USD.R12` = ifelse(is.na(`Volume USD1fg`),\"\", paste0(\"# \",`Volume USD.R3`)),\n          Below.R12 = ifelse(is.na(Below1fg),\"\", paste0(\"# \",Below.R3)),\n          Since.R12 = ifelse(is.na(Since1fg),\"\", paste0(\"# \",Since.R3)),\n          Target1yr.R12 = ifelse(is.na(Target1yr1fg),\"\", paste0(\"# \",Target1yr.R3)),\n          Trend1yr.R12 = ifelse(is.na(Trend1yr1fg),\"\", paste0(\"# \",Trend1yr.R3)),\n          Upper1yr.R12 = ifelse(is.na(Upper1yr1fg),\"\", paste0(\"# \",Upper1yr.R3)),\n          Lower1yr.R12 = ifelse(is.na(Lower1yr1fg),\"\", paste0(\"# \",Lower1yr.R3)),\n          Today.R12 = ifelse(is.na(Today1fg),\"\", paste0(\"# \",Today.R3)),\n          Return.5d.R12 = ifelse(is.na(Return.5d1fg),\"\", paste0(\"# \",Return.5d.R3)),\n          Return.15d.R12 = ifelse(is.na(Return.15d1fg),\"\", paste0(\"# \",Return.15d.R3)),\n          Return.1m.R12 = ifelse(is.na(Return.1m1fg),\"\", paste0(\"# \",Return.1m.R3)),\n          Return.6m.R12 = ifelse(is.na(Return.6m1fg),\"\", paste0(\"# \",Return.6m.R3)),\n          Return.YTD.R12 = ifelse(is.na(Return.YTD1fg),\"\", paste0(\"# \",Return.YTD.R3)),\n          Return.1yr.R12 = ifelse(is.na(Return.1yr1fg),\"\", paste0(\"# \",Return.1yr.R3)),\n          Return.5yr.R12 = ifelse(is.na(Return.5yr1fg),\"\", paste0(\"# \",Return.5yr.R3)),\n          EPS.R12 = ifelse(is.na(EPS1fg),\"\", paste0(\"# \",EPS.R3)),\n          Market.Cap.R12 = ifelse(is.na(Market.Cap1fg),\"\", paste0(\"# \",Market.Cap.R3)),\n          PE.R12 = ifelse(is.na(PE1fg),\"\", paste0(\"# \",PE.R3)),\n          Beta.R12 = ifelse(is.na(Beta1fg),\"\", paste0(\"# \",Beta.R3)),\n          Forward.PE.R12 = ifelse(is.na(Forward.PE1fg),\"\", paste0(\"# \",Forward.PE.R3)),\n          Dividend.R12 = ifelse(is.na(Dividend1fg),\"\", paste0(\"# \",Dividend.R3)),\n          Revenue.R12 = ifelse(is.na(Revenue1fg),\"\", paste0(\"# \",Revenue.R3)),\n          Net.Income.R12 = ifelse(is.na(Net.Income1fg),\"\", paste0(\"# \",Net.Income.R3)),\n          Shares.Out.R12 = ifelse(is.na(Shares.Out1fg),\"\", paste0(\"# \",Shares.Out.R3)),\n          Earnings.Date.R12 = ifelse(is.na(Earnings.Date1fg),\"\", paste0(\"# \",Earnings.Date.R3)),\n          \n        )\n        \n        price_df = price_df %>% mutate(\n          r.P1 = r1fg,\n          Company.P1 = Company1fg,\n          Symbol.P1 = Symbol1fg,\n          Sector.P1 = Sector1fg,\n          Price.P1 = Price1fg,\n          `Volume USD.P1` = comma(`Volume USD1fg`),\n          Below.P1 = ifelse(Below1fg < 0,paste0(\"-\",-1*Below1fg,\"%fg\" ),\"Current\"),\n          Since.P1 = ifelse(Since1fg == 0, \"Current\",ifelse(Since1fg < 366,paste0(round(as.numeric(Since1fg)/1,1),\"d\"),\n                                                            paste0(round(as.numeric(Since1fg)/365,1),\"yr\"))),\n          Target1yr.P1 = ifelse(Target1yr1fg>0,paste0(\"<font color = 'darkgreen'>\",Target1yr1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                paste0(\"<font color = 'maroon'>\",-1*Target1yr1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          Trend1yr.P1 = ifelse(Trend1yr1fg>0,paste0(\"<font color = 'darkgreen'>\",Trend1yr1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                               paste0(\"<font color = 'maroon'>\",-1*Trend1yr1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Upper1yr.P1 = ifelse(Upper1yr1fg>0,paste0(\"<font color = 'darkgreen'>\",Upper1yr1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                               paste0(\"<font color = 'maroon'>\",-1*Upper1yr1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Lower1yr.P1 = ifelse(Lower1yr1fg>0,paste0(\"<font color = 'darkgreen'>\",Lower1yr1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                               paste0(\"<font color = 'maroon'>\",-1*Lower1yr1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Today.P1 = ifelse(Today1fg>0,paste0(\"<font color = 'darkgreen'>\",Today1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                            paste0(\"<font color = 'maroon'>\",-1*Today1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.5d.P1 = ifelse(Return.5d1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.5d1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                paste0(\"<font color = 'maroon'>\",-1*Return.5d1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.15d.P1 =ifelse(Return.15d1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.15d1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                paste0(\"<font color = 'maroon'>\",-1*Return.15d1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.1m.P1 = ifelse(Return.1m1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.1m1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                paste0(\"<font color = 'maroon'>\",-1*Return.1m1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.6m.P1 = ifelse(Return.6m1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.6m1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                paste0(\"<font color = 'maroon'>\",-1*Return.6m1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.YTD.P1 = ifelse(Return.YTD1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.YTD1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                 paste0(\"<font color = 'maroon'>\",-1*Return.YTD1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.1yr.P1 = ifelse(Return.1yr1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.1yr1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                 paste0(\"<font color = 'maroon'>\",-1*Return.1yr1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          Return.5yr.P1 = ifelse(Return.5yr1fg>0,paste0(\"<font color = 'darkgreen'>\",Return.5yr1fg,\"%\",as.character(icon(\"arrow-up\"))),\n                                 paste0(\"<font color = 'maroon'>\",-1*Return.5yr1fg,\"%\",as.character(icon(\"arrow-down\")))),\n          \n          EPS.P1 = EPS1fg,\n          Market.Cap.P1 = Market.Cap1fg,\n          PE.P1 = PE1fg,\n          Beta.P1 = Beta1fg,\n          Forward.PE.P1 = Forward.PE1fg,\n          Dividend.P1 = Dividend1fg,\n          Revenue.P1 = Revenue1fg,\n          Net.Income.P1 = Net.Income1fg,\n          Shares.Out.P1 = Shares.Out1fg,\n          Earnings.Date.P1 = Earnings.Date1fg\n          \n        )\n        a = ocean %>% select(Symbol, Market.Cap.P1 = Market.CapD.p)\n        price_df$Market.Cap.P1 = NULL\n        price_df = price_df %>% left_join(a, by = \"Symbol\")\n        price_df = price_df %>% relocate(Market.Cap.P1,.before = EPS.P1)\n        \n        price_df = price_df %>% mutate(\n          r.R12 = NA,\n          Company.R12 = NA,\n          Symbol.R12 = NA,\n          Sector.R12 = NA,\n          Earnings.Date.R12 = NA\n        )\n        \n        \n        oc = ocean %>% filter(Company1 %in% input$stocklist1)\n        \n        stocksA = oc$Symbol\n        \n        data1 = price_df %>% filter(Symbol %in% stocksA)\n        a1 = data1 %>% select(contains(\".P1\"))\n        \n        a = data1 %>% select(contains(\"1fg\"))\n        b = data1  %>% select(contains(\".R12\"))\n        c = data1 %>% select(contains(\".R3\"))\n        a1 = t(a1)\n        a1 = data.frame(a1)\n        \n        a1$Outcome = str_replace_all(rownames(a1),\".P1\",\"\")\n        rownames(a1) = NULL\n        \n        colnames(a1) = c(stocksA,\"Outcome\")\n        a = t(a)\n        a = data.frame(a)\n        a$Outcome = str_replace_all(rownames(a),\"1fg\",\"\")\n        rownames(a) = NULL\n        \n        colnames(a) = c(\"Overview.1fgA\",\"Outcome\")\n        a\n        b = t(b)\n        b = data.frame(b)\n        b$Outcome = str_replace_all(rownames(b),\".R12\",\"\")\n        rownames(b) = NULL\n        colnames(b) = c(paste0(\"Rank # \",stocksA),\"Outcome\")\n        \n        \n        c = t(c)\n        c = data.frame(c)\n        c$Outcome = str_replace_all(rownames(c),\".R3\",\"\")\n        rownames(c) = NULL\n        colnames(c) = c(\"Overview.R3A\",\"Outcome\")\n        \n        alld = a1 %>% left_join(a, by = \"Outcome\")\n        alld\n        alld <- alld %>% left_join(b, by = \"Outcome\")\n        alld\n        alld <- alld %>% left_join(c, by = \"Outcome\")\n        alld\n        \n        \n        \n        oc = ocean %>% filter(Company1 %in% input$stocklist2)\n        \n        stocksB = oc$Symbol\n        \n        data1 = price_df %>% filter(Symbol %in% stocksB)\n        a1 = data1 %>% select(contains(\".P1\"))\n        \n        a = data1 %>% select(contains(\"1fg\"))\n        b = data1  %>% select(contains(\".R12\"))\n        c = data1 %>% select(contains(\".R3\"))\n        a1 = t(a1)\n        a1 = data.frame(a1)\n        a1$Outcome = str_replace_all(rownames(a1),\".P1\",\"\")\n        rownames(a1) = NULL\n        colnames(a1) = c(stocksB,\"Outcome\")\n        a = t(a)\n        a = data.frame(a)\n        a$Outcome = str_replace_all(rownames(a),\"1fg\",\"\")\n        rownames(a) = NULL\n        colnames(a) = c(\"Overview.1fgB\",\"Outcome\")\n        a\n        b = t(b)\n        b = data.frame(b)\n        b$Outcome = str_replace_all(rownames(b),\".R12\",\"\")\n        rownames(b) = NULL\n        colnames(b) = c(paste0(\"Rank # \",stocksB),\"Outcome\")\n        \n        \n        c = t(c)\n        c = data.frame(c)\n        c$Outcome = str_replace_all(rownames(c),\".R3\",\"\")\n        rownames(c) = NULL\n        colnames(c) = c(\"Overview.R3B\",\"Outcome\")\n        \n        alld = alld %>% left_join(a1, by = \"Outcome\")\n        alld = alld %>% left_join(a, by = \"Outcome\")\n        \n        alld <- alld %>% left_join(b, by = \"Outcome\")\n        \n        alld <- alld %>% left_join(c, by = \"Outcome\")\n        alld = alld %>% relocate(Outcome,.before = stocksA)\n        alld = alld %>% filter(!Outcome %in% \"r\")\n        \n        datatable(alld,selection = \"single\",rownames = FALSE,escape = FALSE,extensions = 'FixedHeader',class = c('right-border-column','stripe'),\n                  \n                  options = list(            #fixedHeader = TRUE,\n                    #scrollY = \"2000px\", # Optional: set a fixed height for vertical scrolling\n                    #scrollCollapse = FALSE, # Optional: adjust table height based on content\n                    ordering=TRUE,dom = 'lftpr',searching = FALSE,lengthChange = FALSE,selection = \"single\",lengthChange =\n                      FALSE,paging = FALSE,scrollX = FALSE,scrollY = NULL,fillContainer = FALSE,\n                    columnDefs = list(list(className = 'dt-left', targets =\n                                             c(colnames(alld[1]))),list(className ='dt-left', \n                                                                        targets = c(2)),\n                                      #list(className = 'dt-right', targets = c(colnames(alld)[2:3])),\n                                      list(visible=FALSE, targets=c(\"Overview.1fgA\")),\n                                      list(visible=FALSE, targets=c(\"Overview.R3A\")),\n                                      list(visible=FALSE, targets=c(\"Overview.1fgB\")),\n                                      list(visible=FALSE, targets=c(\"Overview.R3B\")),\n                                      list(visible=FALSE, targets=c(4)),list(orderData=c(4), targets=c(3)),\n                                      list(visible=FALSE, targets=c(8)),list(orderData=c(8), targets=c(7))\n                                      \n                                      \n                                      \n                                      \n                                      \n                                      \n                                      \n                                      \n                                      \n                                      \n                    ),\n                    initComplete = JS(\"function(settings, json)\n                                                 {\",\"$(this.api().table().header()).css({'background-color': 'white', 'color': 'black',\n                                                 'height': '50%'});\",\"}\"),\n                    headerCallback = DT::JS(\"function(thead) {\",\"  $(thead).css('font-size', '95%');\",\"}\"))) %>%\n          #     DT::formatStyle(columns = c(1), width='15%') %>%\n          DT::formatStyle( 1, target= 'row',fontWeight ='normal', lineHeight='.3') %>%\n          DT::formatStyle(., which(c(colnames(alld)) %in% c(colnames(alld))), color = '', \n                          cursor='pointer',fontSize = \"100%\",fontFamily=\"arial\") %>%\n          formatStyle(\n            columns = 'Outcome', # Specify the column to bold\n            fontWeight = 'bold'  # Set the font weight to bold\n          ) %>%\n          formatStyle(\n            columns = names(data), # Apply to all columns in the selected row\n            valueColumns = \"Outcome\", # Use a column to identify the row (e.g., \"Name\")\n            target = \"row\",        # Target the entire row\n            backgroundColor = styleEqual(c(\"Return.5yr\",\"Target1yr\",\"Trend1yr\",\"Upper1yr\",\"Lower1yr\",\"Today\",\"Return.5d\",\"Return.15d\",\"Return.1m\",\"Return.6m\",\"Return.YTD\",\"Return.1yr\",\"Return.5yr\"),\"lightyellow\"), # Optional: highlight the row for clarity\n            borderBottom = styleEqual(\"Return.5yr\", \"2px solid red\") # Add a 2px solid red border to the bottom of the row where Name is \"Bob\"\n          )\n        \n      }\n    },server = FALSE)\n    \n    observe({\n      if (input$tabs == \"News\") {\n        output$news1 = renderDT({\n          \n          oc = ocean %>% filter(Company1 %in% input$stocklist1)\n          \n          #google = news_df %>% filter(Symbol %in% ab$Symbol)\n          a = Sys.Date()\n          df = NULL\n          df$Current = round_date(a, \"month\")\n          df$i = 0\n          df = data.frame(df)\n          if (nrow(oc) >0){\n            query = paste0(oc$Symbol)\n            \n            encode_special_characters <- function(text) {\n              encoded_text <- ''\n              special_characters <- list('&' = '%26', '=' = '%3D', '+' = '%2B', ' ' = '%20')  # Add more special characters as needed\n              for (char in strsplit(text, '')[[1]]) {\n                encoded_text <- paste0(encoded_text, ifelse(is.null(special_characters[[char]]), char, special_characters[[char]]))\n              }\n              return(tolower(encoded_text))\n            }\n            \n            query2 <- encode_special_characters(query)\n            morelink = paste0(\"https://news.google.com/search?q=\",query2,\"&hl=en-US&gl=US&ceid=US%3Aen\")\n            html_dat <- read_html(morelink)\n            \n            \n            dat <- data.frame(Link = html_dat %>%\n                                html_nodes(\"article\") %>% \n                                html_node(\"a\") %>% \n                                html_attr('href')) %>% \n              mutate(Link = gsub(\"./articles/\",\"https://news.google.com/articles/\",Link))\n            \n            news_text <- html_dat %>%\n              html_nodes(\"article\") %>% \n              html_text2()\n            \n            x <- strsplit(news_text, \"\\n\")\n            news_df <- data.frame(\n              Title = sapply(x, function(item) item[3]),\n              Source = sapply(x, function(item) item[1]),\n              Time = sapply(x, function(item) item[4]),\n              Author = gsub(\"By\\\\s+.*\",\"\", sapply(x, function(item) item[5])),\n              Link = dat$Link\n            )\n            \n            \n            news_df$Link = paste0(\"https://news.google.com\",substr(news_df$Link,2,nchar(news_df$Link)))\n            #df$Symbol = s[i]\n            #news_df = news_df[10,]\n            #df = rbind(df,news_df$Link)\n            #View(news_df)\n            news_df$Week = ifelse(str_detect(news_df$Time,\"days\"),1,ifelse(str_detect(news_df$Time,\"day\"),1,0))\n            \n            news_df$Month = sub(\"^([[:alpha:]]*).*\", \"\\\\1\", news_df$Time)\n            news_df$Date = as.numeric(gsub(\"\\\\D\", \"\", news_df$Time))\n            news_df$i = match(news_df$Month,month.abb)\n            \n            news_df = news_df %>% left_join(df, by = \"i\")\n            news_df$Current = as.Date(news_df$Current,\"%Y-%d-%m\")\n            news_df$Current = ifelse(is.na(news_df$Current),as.character(Sys.Date()),as.character(news_df$Current))\n            news_df$i = ifelse(is.na(news_df$i),news_df$Date,0)\n            news_df$Current = as.Date(news_df$Current)\n            news_df$Current = ifelse(news_df$i == 0,news_df$Current + news_df$Date -1,Sys.Date() - news_df$Date)\n            \n            news_df$Current = ifelse(news_df$Month == \"Yesterday\",Sys.Date()-1,news_df$Current)\n            news_df$Current = as_date(news_df$Current, origin = lubridate::origin)\n            a = NULL\n            a$Title = \"More\"\n            a$Link = morelink\n            a$Symbol = oc$Symbol\n            news_df$Symbol = oc$Symbol\n            news_df$Current = as.Date(news_df$Current)\n            news_df = distinct(news_df,Title,.keep_all = TRUE)\n            ab = news_df %>% group_by(Symbol) %>% slice_max(order_by = Current,n = 100)\n            ab$i = seq.int(1:nrow(ab))\n            ab = ab %>% arrange(desc(i))\n            ab = ab %>% filter(i < 100)\n            news_df = bind_rows(ab,a)\n            b = news_df %>% filter(Title == \"More\")\n            a = news_df %>% slice_max(order_by = i, n = 9)\n            a = rbind(a,b)\n            a = a %>% select(Title,Link,Symbol, Time, Current, Source)\n            \n            google = a %>% filter(Symbol %in% ab$Symbol)\n            \n            \n            \n            #if (nrow(google) > 0) {\n            google$Symbol = NULL\n            google$Link <- paste0(\"<a href='\",google$Link,\"' target='_blank'>\",google$Title,\"<\/a>\")\n            google = google %>% arrange(Current)\n            google$all = as.numeric(gsub(\" .*$\", \"\", google$Time))\n            google$stamp = \"\"\n            google$stamp = ifelse(grepl(\"hours ago\",google$Time),paste0(\"...\"),google$stamp)\n            google$stamp = ifelse(grepl(\"1 hour ago\",google$Time),paste0(\"..\"),google$stamp)\n            google$stamp = ifelse(grepl(\"days\",google$Time),paste0(\"z\"),google$stamp)\n            google$stamp = ifelse(grepl(\"minutes\",google$Time),paste0(\".\"),google$stamp)\n            google$stamp = ifelse(grepl(\"Yesterday\",google$Time),paste0(\"a\"),google$stamp)\n            \n            \n            google = google %>% arrange(stamp,all)\n            a = google %>% filter(stamp %in% \"\")\n            b = google %>% filter(!Link %in% a$Link)\n            google = rbind(b,a)\n            google <- google %>% select(Link,Source, Time,stamp)\n            google$stamp = seq.int(1:nrow(google))\n            \n            DT::datatable(google,escape = FALSE,rownames = FALSE, class = list(stripe = FALSE),\n                          colnames = rep(\"\", ncol(google)),options = list(ordering=TRUE,searching = FALSE,\n                                                                          lengthChange = FALSE,selection = \"single\",lengthChange =\n                                                                            FALSE,paging = FALSE,scrollX = TRUE,\n                                                                          columnDefs = list(\n                                                                            \n                                                                            list(visible=FALSE, targets=c(3)),list(orderData=c(3), targets=c(2))\n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                          ))) %>%\n              DT::formatStyle(\n                columns = \"Link\", # Apply style to the 'Description' column\n                `white-space` = \"normal\", # Allow text to wrap\n                `word-wrap` = \"break-word\" # Break long words if necessary\n              )\n          }\n          \n        })\n        \n        output$news2 = renderDT({\n          \n          oc = ocean %>% filter(Company1 %in% input$stocklist2)\n          \n          #google = news_df %>% filter(Symbol %in% ab$Symbol)\n          a = Sys.Date()\n          df = NULL\n          df$Current = round_date(a, \"month\")\n          df$i = 0\n          df = data.frame(df)\n          \n          if (nrow(oc)> 0) {\n            query = paste0(oc$Symbol)\n            \n            encode_special_characters <- function(text) {\n              encoded_text <- ''\n              special_characters <- list('&' = '%26', '=' = '%3D', '+' = '%2B', ' ' = '%20')  # Add more special characters as needed\n              for (char in strsplit(text, '')[[1]]) {\n                encoded_text <- paste0(encoded_text, ifelse(is.null(special_characters[[char]]), char, special_characters[[char]]))\n              }\n              return(tolower(encoded_text))\n            }\n            \n            query2 <- encode_special_characters(query)\n            morelink = paste0(\"https://news.google.com/search?q=\",query2,\"&hl=en-US&gl=US&ceid=US%3Aen\")\n            html_dat <- read_html(morelink)\n            \n            \n            dat <- data.frame(Link = html_dat %>%\n                                html_nodes(\"article\") %>% \n                                html_node(\"a\") %>% \n                                html_attr('href')) %>% \n              mutate(Link = gsub(\"./articles/\",\"https://news.google.com/articles/\",Link))\n            \n            news_text <- html_dat %>%\n              html_nodes(\"article\") %>% \n              html_text2()\n            \n            x <- strsplit(news_text, \"\\n\")\n            news_df <- data.frame(\n              Title = sapply(x, function(item) item[3]),\n              Source = sapply(x, function(item) item[1]),\n              Time = sapply(x, function(item) item[4]),\n              Author = gsub(\"By\\\\s+.*\",\"\", sapply(x, function(item) item[5])),\n              Link = dat$Link\n            )\n            \n            \n            news_df$Link = paste0(\"https://news.google.com\",substr(news_df$Link,2,nchar(news_df$Link)))\n            #df$Symbol = s[i]\n            #news_df = news_df[10,]\n            #df = rbind(df,news_df$Link)\n            #View(news_df)\n            news_df$Week = ifelse(str_detect(news_df$Time,\"days\"),1,ifelse(str_detect(news_df$Time,\"day\"),1,0))\n            \n            news_df$Month = sub(\"^([[:alpha:]]*).*\", \"\\\\1\", news_df$Time)\n            news_df$Date = as.numeric(gsub(\"\\\\D\", \"\", news_df$Time))\n            news_df$i = match(news_df$Month,month.abb)\n            \n            news_df = news_df %>% left_join(df, by = \"i\")\n            news_df$Current = as.Date(news_df$Current,\"%Y-%d-%m\")\n            news_df$Current = ifelse(is.na(news_df$Current),as.character(Sys.Date()),as.character(news_df$Current))\n            news_df$i = ifelse(is.na(news_df$i),news_df$Date,0)\n            news_df$Current = as.Date(news_df$Current)\n            news_df$Current = ifelse(news_df$i == 0,news_df$Current + news_df$Date -1,Sys.Date() - news_df$Date)\n            \n            news_df$Current = ifelse(news_df$Month == \"Yesterday\",Sys.Date()-1,news_df$Current)\n            news_df$Current = as_date(news_df$Current, origin = lubridate::origin)\n            a = NULL\n            a$Title = \"More\"\n            a$Link = morelink\n            a$Symbol = oc$Symbol\n            news_df$Symbol = oc$Symbol\n            news_df$Current = as.Date(news_df$Current)\n            news_df = distinct(news_df,Title,.keep_all = TRUE)\n            ab = news_df %>% group_by(Symbol) %>% slice_max(order_by = Current,n = 100)\n            ab$i = seq.int(1:nrow(ab))\n            ab = ab %>% arrange(desc(i))\n            ab = ab %>% filter(i < 100)\n            news_df = bind_rows(ab,a)\n            b = news_df %>% filter(Title == \"More\")\n            a = news_df %>% slice_max(order_by = i, n = 9)\n            a = rbind(a,b)\n            a = a %>% select(Title,Link,Symbol, Time, Current, Source)\n            \n            google = a %>% filter(Symbol %in% ab$Symbol)\n            \n            \n            \n            #if (nrow(google) > 0) {\n            google$Symbol = NULL\n            google$Link <- paste0(\"<a href='\",google$Link,\"' target='_blank'>\",google$Title,\"<\/a>\")\n            google = google %>% arrange(Current)\n            google$all = as.numeric(gsub(\" .*$\", \"\", google$Time))\n            google$stamp = \"\"\n            google$stamp = ifelse(grepl(\"hours ago\",google$Time),paste0(\"...\"),google$stamp)\n            google$stamp = ifelse(grepl(\"1 hour ago\",google$Time),paste0(\"..\"),google$stamp)\n            google$stamp = ifelse(grepl(\"days\",google$Time),paste0(\"z\"),google$stamp)\n            google$stamp = ifelse(grepl(\"minutes\",google$Time),paste0(\".\"),google$stamp)\n            google$stamp = ifelse(grepl(\"Yesterday\",google$Time),paste0(\"a\"),google$stamp)\n            \n            \n            google = google %>% arrange(stamp,all)\n            a = google %>% filter(stamp %in% \"\")\n            b = google %>% filter(!Link %in% a$Link)\n            google = rbind(b,a)\n            google <- google %>% select(Link,Source, Time,stamp)\n            google$stamp = seq.int(1:nrow(google))\n            \n            DT::datatable(google,escape = FALSE,rownames = FALSE, class = list(stripe = FALSE),\n                          colnames = rep(\"\", ncol(google)),options = list(ordering=TRUE,searching = FALSE,\n                                                                          lengthChange = FALSE,selection = \"single\",lengthChange =\n                                                                            FALSE,paging = FALSE,scrollX = TRUE,\n                                                                          columnDefs = list(\n                                                                            \n                                                                            list(visible=FALSE, targets=c(3)),list(orderData=c(3), targets=c(2))\n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n                                                                          ))) %>%\n              DT::formatStyle(\n                columns = \"Link\", # Apply style to the 'Description' column\n                `white-space` = \"normal\", # Allow text to wrap\n                `word-wrap` = \"break-word\" # Break long words if necessary\n              )\n          }\n          \n        })\n        \n      }\n      \n    })\n    observeEvent(input$tabs,{output$about1 <- renderUI({ \n      \n      online = \"https://www.blackboxi.com/about1\"\n      my_test <- tags$iframe(src = online,allow=\"geolocation\",frameBorder=0,height = 2000,width = 1450,style = \"position: relative; left: 50px; right: 50px;  top: 0px\") })})  \n    \n    \n    \n    \n    observe({\n      oc = ocean %>% arrange(r)\n      updateVirtualSelect(inputId = \"stocklist1\",\n                          open = FALSE) \n      updateVirtualSelect(inputId = \"stocklist2\",\n                          open = FALSE) \n      \n    })\n    \n    observeEvent(input$support, {\n      # Open an external URL in a new tab\n      shinyjs::runjs(\"window.open('https://www.paypal.com/donate/?hosted_button_id=GPLBL4CWQ2HNE', '_blank');\")\n    })\n    \n    \n  } ## end, get UI\n  \n  observeEvent(input$refresh,{\n    abindsave <<- abind\n    get_load()\n    get_ui()\n  })\n  \n  get_ui()\n  \n  \n  selectedRow2 <- eventReactive(input$datatable_rows_selected,{\n    row.names(datatbl() )[c(input$datatable_rows_selected)] })\n  \n  observeEvent(input$datatable_rows_selected, {\n    row <- input$datatable_rows_selected\n    clickedtbl = datatbl()[selectedRow2(),\"Symbol\"]\n    a = ocean %>% filter(Symbol %in% clickedtbl)\n    updateVirtualSelect(inputId = \"stocklist2\",\n                        selected =  a$Company1,\n                        open = FALSE) \n    \n    \n  })\n  \n  addTooltip(session, \"refresh\", \"Refresh\", placement = \"bottom\", trigger = \"hover\",\n             options = NULL)\n  \n  addTooltip(session, \"support\", \"Support Brain Disorder Research\", placement = \"bottom\", trigger = \"hover\",\n             options = NULL)\n  \n  observe({\n    \n    onevent(\"mouseenter\", \"btn1\", shinyjs::click(\"search1\"))\n    onevent(\"mouseenter\", \"btn2\", shinyjs::click(\"search2\"))\n    \n  })\n  \n  observeEvent(input$search1,{\n    updateVirtualSelect(\n      inputId = \"stocklist1\",\n      open = TRUE)\n    \n  })\n  \n  observeEvent(input$search2,{\n    updateVirtualSelect(\n      inputId = \"stocklist2\",\n      open = TRUE)\n    \n  })\n  \n  \n  #a = \"/Users/bway/Downloads\"\n  #a = getwd()\n  #my_string <- a\n  \n  # Split the string by '/'\n  #split_string <- strsplit(my_string, \"/\")[[1]]\n  \n  # Check if there are at least three parts after splitting\n  #if (length(split_string) >= 3) {\n  #  # Take the first two parts and rejoin them with '/'\n  #  a <- paste(split_string[1:3], collapse = \"/\")\n  #  print(a)\n  #} else {\n  #  print(\"String does not contain at least three slashes.\")\n  #}\n  #saveRDS(ocean,paste0(a,\"/ocean_in-dash-data1\",Sys.Date(),\".rds\"))\n  #observe({\n  #  str(shinybrowser::get_os())\n  #})\n  \n  observeEvent(session,\n               click(\"hidden1\")\n               )\n  observeEvent(input$hidden1,{\n               \n               updateVirtualSelect(inputId = \"stocklist2\",\n                                   selected =  ocean$Company1[2],\n                                   open = FALSE)           \n  })\n  \n  \n}\nshinyApp(ui, server, options = list(launch.browser = TRUE,port = 2030))","type":"text"},{"name":"x_min.R","content":"library(shiny)\nlibrary(DT)\nlibrary(shinyWidgets)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(stringr)\nlibrary(shinyjs)\nlibrary(bslib)\nlibrary(lubridate)\nlibrary(shinyBS)\nlibrary(plotly)\n\nui = fluidPage(\n  DTOutput(\"datatable\")\n)\nserver = function(input, output,session) {\n output$datatable = renderDT({\n   url <-  \"https://s3.us-east-1.amazonaws.com/boxioy.com/boxstocks.csv\"\n   place <-  read.csv(url)\n   place\n }) \n}\nshinyApp(ui, server, options = list(launch.browser = TRUE,port = 2031))","type":"text"}]
